{"version":3,"sources":["ng://lazy-for/lib/lazy-for.directive.ts","ng://lazy-for/lib/lazy-for.module.ts"],"names":["LazyForDirective","vcr","tpl","iterableDiffers","this","list","initialized","firstUpdate","lastChangeTriggeredByScroll","Object","defineProperty","prototype","differ","find","create","update","ngOnInit","_this","templateElem","element","nativeElement","undefined","containerElem","parentElement","addEventListener","e","ngDoCheck","Array","isArray","diff","clamp","number","boundOne","boundTwo","Math","min","max","onFirstUpdate","sampleItemElem","itemHeight","itemTagName","createEmbeddedView","context","index","clientHeight","tagName","beforeListElem","document","createElement","insertBefore","afterListElem","nextSibling","toLowerCase","style","listStyleType","length","clear","height","listHeight","scrollTop","fixedHeaderHeight","getBoundingClientRect","top","listStartI","floor","listEndI","ceil","i","Directive","args","selector","ViewContainerRef","TemplateRef","IterableDiffers","Input","LazyForModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\n  Directive,\n  DoCheck,\n  Input,\n  IterableDiffer,\n  IterableDiffers,\n  TemplateRef,\n  ViewContainerRef,\n} from \"@angular/core\";\n\n@Directive({\n  selector: \"[lazyFor]\",\n})\nexport class LazyForDirective implements DoCheck {\n  @Input(\"lazyForWithHeight\") itemHeight: number;\n  @Input(\"lazyForWithContainer\") containerElem: HTMLElement;\n  @Input(\"lazyForWithTagName\") itemTagName: string;\n\n  @Input()\n  set lazyForOf(list) {\n    this.list = list;\n\n    if (list) {\n      this.differ = this.iterableDiffers.find(list).create();\n\n      if (this.initialized) {\n        this.update();\n      }\n    }\n  }\n\n  private templateElem: HTMLElement;\n\n  private beforeListElem: HTMLElement;\n  private afterListElem: HTMLElement;\n\n  private list = [];\n\n  private initialized = false;\n  private firstUpdate = true;\n\n  private differ: IterableDiffer<any>;\n\n  private lastChangeTriggeredByScroll = false;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private tpl: TemplateRef<any>,\n    private iterableDiffers: IterableDiffers\n  ) {}\n\n  ngOnInit() {\n    this.templateElem = this.vcr.element.nativeElement;\n\n    if (this.containerElem === undefined) {\n      this.containerElem = this.templateElem.parentElement;\n    }\n\n    //Adding an event listener will trigger ngDoCheck whenever the event fires so we don't actually need to call\n    //update here.\n    this.containerElem.addEventListener(\"scroll\", (e) => {\n      this.lastChangeTriggeredByScroll = true;\n    });\n\n    this.initialized = true;\n  }\n\n  ngDoCheck() {\n    if (this.differ && Array.isArray(this.list)) {\n      if (this.lastChangeTriggeredByScroll) {\n        this.update();\n        this.lastChangeTriggeredByScroll = false;\n      } else {\n        let changes = this.differ.diff(this.list);\n\n        if (changes !== null) {\n          this.update();\n        }\n      }\n    }\n  }\n\n  // Clamps number within the inclusive lower and upper bounds.\n  private clamp(number: number, boundOne: number, boundTwo: number): number {\n    if (!boundTwo) {\n      return Math.max(number, boundOne) === boundOne ? number : boundOne; \n    } \n    \n    if (Math.min(number, boundOne) === number) {\n      return boundOne;\n    } \n    \n    if (Math.max(number, boundTwo) === number) {\n      return boundTwo;\n    }\n\n    return number;\n  }\n\n  private onFirstUpdate() {\n    let sampleItemElem: HTMLElement;\n\n    if (this.itemHeight === undefined || this.itemTagName === undefined) {\n      this.vcr.createEmbeddedView(this.tpl, { context: this.list[0], index: 0 });\n      sampleItemElem = <HTMLElement>this.templateElem.nextSibling;\n    }\n\n    if (this.itemHeight === undefined) {\n      this.itemHeight = sampleItemElem.clientHeight;\n    }\n\n    if (this.itemTagName === undefined) {\n      this.itemTagName = sampleItemElem.tagName;\n    }\n\n    this.beforeListElem = document.createElement(this.itemTagName);\n    this.templateElem.parentElement.insertBefore(this.beforeListElem, this.templateElem);\n\n    this.afterListElem = document.createElement(this.itemTagName);\n    //This inserts after the templateElem. see http://stackoverflow.com/a/4793630/373655 for details\n    this.templateElem.parentElement.insertBefore(this.afterListElem, this.templateElem.nextSibling);\n\n    if (this.itemTagName.toLowerCase() === 'li') {\n      this.beforeListElem.style.listStyleType = 'none';\n      this.afterListElem.style.listStyleType = 'none';\n    }\n\n    this.firstUpdate = false;\n  }\n\n  private update() {\n    if (this.list.length === 0) {\n      this.vcr.clear();\n      if (!this.firstUpdate) {\n        this.beforeListElem.style.height = '0';\n        this.afterListElem.style.height = '0';\n      }\n      return;\n    }\n\n    if (this.firstUpdate) {\n      this.onFirstUpdate();\n    }\n\n    let listHeight = this.containerElem.clientHeight;\n    let scrollTop = this.containerElem.scrollTop;\n\n    //The height of anything inside the container but above the lazyFor content;\n    let fixedHeaderHeight =\n      (this.beforeListElem.getBoundingClientRect().top - this.beforeListElem.scrollTop) -\n      (this.containerElem.getBoundingClientRect().top - this.beforeListElem.scrollTop);\n    \n    //This needs to run after the scrollTop is retrieved.\n    this.vcr.clear();\n\n    let listStartI = Math.floor((scrollTop - fixedHeaderHeight) / this.itemHeight);\n    listStartI = this.clamp(listStartI, 0, this.list.length);\n\n    let listEndI = Math.ceil((scrollTop - fixedHeaderHeight + listHeight) / this.itemHeight);\n    listEndI = this.clamp(listEndI, -1, this.list.length - 1);\n\n    for (let i = listStartI; i <= listEndI; i++) {\n      this.vcr.createEmbeddedView(this.tpl, { context: this.list[i], index: i });\n    }\n\n    this.beforeListElem.style.height = `${listStartI * this.itemHeight}px`;\n    this.afterListElem.style.height = `${(this.list.length - listEndI - 1) * this.itemHeight}px`;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { LazyForDirective } from './lazy-for.directive';\n\n@NgModule({\n  declarations: [LazyForDirective],\n  exports: [LazyForDirective]\n})\nexport class LazyForModule { }\n"]}